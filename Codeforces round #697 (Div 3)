PROBLEM A - 
SOLUTION - 
#include<bits/stdc++.h>
using namespace std;
 
 
void solve()
{
  long long n;
  cin >> n;
  bool x = false;
  if(n%2 != 0)
  {
    x = true;
  }
  else 
  {
   while(n != 1)
   {
     if(n%2!=0 && n!=1)
     {
       x = true;
       break;
     }
     n = n/2;
   }
  }
  if(x)
  {
    cout << "YES";
  }
  else 
  {
    cout << "NO";
  }
}
int main()
{
  int T;
  cin >> T;
  while(T--)
  {
    solve();
    cout << "\n";
  }
  return 0;
}

LEARNINGS FRO THIS PROBLEM - 
1.  2 is the only even prime number.
2.  To find the odd divisor of even number keep on dividing this number with 2 if there occurs a odd number in it then it is the only odd divisor of that number.


PROBLEM B - 
SOLUTION - 
#include<bits/stdc++.h>
using namespace std;
void solve()
{
  int n;
  cin >> n;
  for(int i=0;i<=1000;i++)
  {
    int other = n-(2020*i);
    if(other<0) break;
    if(other%2021 == 0)
    {
      cout << "YES";
      return;
    }
  }
  cout << " NO";
}
int main()
{
  int T;
  cin >> T;
  while(T--)
  {
    solve();
    cout << "\n";
  }
}

LEARNINGS - 
1. Try solvig questions by mathematics also.


PROBLEM C -
SOLUTION - 
#include<bits/stdc++.h>
using namespace std;
void solve()
{
  int n,m,k;
  cin >> n >> m >> k;
  vector<int> a(k),b(k);
  for(int i=0;i<k;i++)
  {
    cin >> a[i];
  }
  for(int i=0;i<k;i++)
  {
    cin >> b[i];
  }
  vector<int> B(n+1),G(m+1);
  for(int i=0;i<k;i++)
  {
    B[a[i]]++;
  }
  for(int i=0;i<k;i++)
  {
    G[b[i]]++;
  }
  long long total = 0;
  for(int i=0;i<k;i++)
  {
    total += ((k-1) - (G[b[i]]-1) - (B[a[i]]-1));
  }
  cout << total/2;
}
int main()
{
  int T;
  cin >> T;
  while(T--)
  {
    solve();
    cout << "\n";
  }
}


LEARNINGS - 
1. Good graph technique - refer to this video - https://www.youtube.com/watch?v=wDTdx8kqbyo&t=2s


